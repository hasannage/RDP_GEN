name: RDP Auto Setup

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Set Execution Policy
        run: Set-ExecutionPolicy Bypass -Scope Process -Force

      - name: Install Tailscale
        run: |
          choco install tailscale -y
          refreshenv

      - name: Configure Core RDP Settings
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $username = "RDP"
          $password = [System.Web.Security.Membership]::GeneratePassword(16,4)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $username
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          }
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Start Tailscale
        run: |
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $tsPath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname GitHubRDP --accept-routes
          $tsIP = & $tsPath ip -4
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Send RDP Info to Telegram
        run: |
          $botToken = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          $chatId = "${{ secrets.TELEGRAM_CHAT_ID }}"
          $message = "âœ… RDP Ready`nAddress: $env:TAILSCALE_IP`nUsername: RDP`nPassword: $env:RDP_PASSWORD"
          Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/sendMessage" -Method Post -Body @{chat_id=$chatId; text=$message}

      - name: Keep Connection Alive
        run: |
          while ($true) {
            Write-Host "[$(Get-Date)] RDP active. Workflow will run until cancelled."
            Start-Sleep -Seconds 300
          }
