name: RDP Auto-Renew

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # يشغل كل 6 ساعات تلقائيًا

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Set Execution Policy
        run: Set-ExecutionPolicy Bypass -Scope Process -Force

      - name: Configure Core RDP Settings
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User (if not exists)
        run: |
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Add-Type -AssemblyName System.Security
              $charSet = @{
                  Upper   = [char[]](65..90)
                  Lower   = [char[]](97..122)
                  Number  = [char[]](48..57)
                  Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
              }
              $rawPassword = @()
              $rawPassword += $charSet.Upper | Get-Random -Count 4
              $rawPassword += $charSet.Lower | Get-Random -Count 4
              $rawPassword += $charSet.Number | Get-Random -Count 4
              $rawPassword += $charSet.Special | Get-Random -Count 4
              $password = -join ($rawPassword | Sort-Object { Get-Random })
              $securePass = ConvertTo-SecureString $password -AsPlainText -Force

              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

              echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          } else {
              Write-Host "User RDP already exists"
          }
          echo "RDP_USER=RDP" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: choco install tailscale -y

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection to RDP failed"; exit 1 }
          Write-Host "RDP TCP connectivity successful!"

      - name: Send Telegram Message
        run: |
          $chat_id = "${{ secrets.TELEGRAM_CHAT_ID }}"
          $bot_token = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          $message = "✅ RDP جاهز (تجديد تلقائي)
Address: $env:TAILSCALE_IP
Username: $env:RDP_USER
Password: $env:RDP_PASSWORD"
          $url = "https://api.telegram.org/bot$bot_token/sendMessage?chat_id=$chat_id&text=$([uri]::EscapeDataString($message))"
          Invoke-RestMethod -Uri $url -Method Get
