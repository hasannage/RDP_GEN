name: RDP Auto-Renew (Tailscale + Telegram Notify)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    # Set to 6 hours = 360 minutes (GitHub Free commonly enforces ~6h max).
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop & relax NLA/security layer for compatibility
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove duplicate firewall rule and add allow on 3389
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            # If user exists, reset password
            $u = Get-LocalUser -Name "RDP"
            $u | Set-LocalUser -Password $securePass
          } else {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }

          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          # Export the generated password to ENV for later use (not persisted outside run)
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "RDP_USER=RDP" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $exe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            Write-Error "Tailscale binary not found at $exe"
            exit 1
          }

          & $exe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale IPv4
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 20) {
              $tsIP = (& $exe ip -4) -replace "\s+",""
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Warning "TCP connection to RDP port 3389 could not be established from runner. This may still be reachable from your client via Tailscale."
          } else {
              Write-Host "TCP connectivity successful!"
          }

      - name: Notify via Telegram
        shell: pwsh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          $user = $env:RDP_USER
          $pass = $env:RDP_PASSWORD
          $ip   = $env:TAILSCALE_IP

          $message = @"
ðŸ”” *RDP Session Ready*
â€¢ Address: `"$ip`"
â€¢ Username: `"$user`"
â€¢ Password: `"$pass`"

_This runner will renew automatically every ~6 hours._
"@

          $body = @{
            chat_id = $env:TELEGRAM_CHAT_ID
            text    = $message
            parse_mode = "Markdown"
          }

          $url = "https://api.telegram.org/bot$($env:TELEGRAM_BOT_TOKEN)/sendMessage"
          try {
            $resp = Invoke-RestMethod -Uri $url -Method Post -ContentType "application/json" -Body ($body | ConvertTo-Json)
            Write-Host "Telegram notify sent."
          } catch {
            Write-Warning "Failed to send Telegram message: $_"
          }

      - name: Maintain Connection (Informational loop)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"

          # Keep job alive until GitHub timeout (or cancellation)
          while ($true) {
            Write-Host "[$(Get-Date -Format s)] RDP Active - will renew when workflow ends."
            Start-Sleep -Seconds 300
          }

      # IMPORTANT: auto-restart dispatch (will run only when job ends). Use GITHUB_TOKEN to dispatch same workflow.
      - name: Auto-Restart Workflow
        if: always()
        shell: pwsh
        env:
          REPO: ${{ github.repository }}
          WORKFLOW_FILE: rdp.yml   # <-- name of this workflow file in .github/workflows/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Slight delay to ensure final logs are flushed (optional)
          Start-Sleep -Seconds 5

          $uri = "https://api.github.com/repos/$env:REPO/actions/workflows/$env:WORKFLOW_FILE/dispatches"
          $headers = @{
            Authorization = "Bearer $env:GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
            "User-Agent" = "gh-actions-autorestart"
          }
          $body = @{ ref = "${{ github.ref_name || 'main' }}" }  # attempts to reuse same branch, falls back to main if not set
          try {
            Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body ($body | ConvertTo-Json -Depth 4)
            Write-Host "Dispatched new workflow run."
          } catch {
            Write-Warning "Failed to dispatch workflow: $_"
          }
